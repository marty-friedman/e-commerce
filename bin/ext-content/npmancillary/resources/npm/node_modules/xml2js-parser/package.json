{
  "_args": [
    [
      {
        "raw": "xml2js-parser@https://registry.npmjs.org/xml2js-parser/-/xml2js-parser-1.1.1.tgz",
        "scope": null,
        "escapedName": "xml2js-parser",
        "name": "xml2js-parser",
        "rawSpec": "https://registry.npmjs.org/xml2js-parser/-/xml2js-parser-1.1.1.tgz",
        "spec": "https://registry.npmjs.org/xml2js-parser/-/xml2js-parser-1.1.1.tgz",
        "type": "remote"
      },
      "/opt/hybris_6.7.0.3/hybris/bin/ext-content/npmancillary/resources/npm"
    ]
  ],
  "_from": "xml2js-parser@https://registry.npmjs.org/xml2js-parser/-/xml2js-parser-1.1.1.tgz",
  "_id": "xml2js-parser@1.1.1",
  "_inCache": true,
  "_location": "/xml2js-parser",
  "_phantomChildren": {},
  "_requested": {
    "raw": "xml2js-parser@https://registry.npmjs.org/xml2js-parser/-/xml2js-parser-1.1.1.tgz",
    "scope": null,
    "escapedName": "xml2js-parser",
    "name": "xml2js-parser",
    "rawSpec": "https://registry.npmjs.org/xml2js-parser/-/xml2js-parser-1.1.1.tgz",
    "spec": "https://registry.npmjs.org/xml2js-parser/-/xml2js-parser-1.1.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/xunit-viewer"
  ],
  "_resolved": "https://registry.npmjs.org/xml2js-parser/-/xml2js-parser-1.1.1.tgz",
  "_shasum": "90dc39f9d84d036ae10f41e6e766a91550444d44",
  "_shrinkwrap": null,
  "_spec": "xml2js-parser@https://registry.npmjs.org/xml2js-parser/-/xml2js-parser-1.1.1.tgz",
  "_where": "/opt/hybris_6.7.0.3/hybris/bin/ext-content/npmancillary/resources/npm",
  "author": {
    "name": "Lauris Vavere",
    "email": "lauris@ma-1.lv"
  },
  "contributors": [
    {
      "name": "Marek Kubica",
      "email": "marek@xivilization.net",
      "url": "https://xivilization.net"
    },
    {
      "name": "maqr",
      "email": "maqr.lollerskates@gmail.com",
      "url": "https://github.com/maqr"
    },
    {
      "name": "Ben Weaver",
      "url": "http://benweaver.com/"
    },
    {
      "name": "Jae Kwon",
      "url": "https://github.com/jaekwon"
    },
    {
      "name": "Jim Robert"
    },
    {
      "name": "Ștefan Rusu",
      "url": "http://www.saltwaterc.eu/"
    },
    {
      "name": "Carter Cole",
      "email": "carter.cole@cartercole.com",
      "url": "http://cartercole.com/"
    },
    {
      "name": "Kurt Raschke",
      "email": "kurt@kurtraschke.com",
      "url": "http://www.kurtraschke.com/"
    },
    {
      "name": "Contra",
      "email": "contra@australia.edu",
      "url": "https://github.com/Contra"
    },
    {
      "name": "Marcelo Diniz",
      "email": "marudiniz@gmail.com",
      "url": "https://github.com/mdiniz"
    },
    {
      "name": "Michael Hart",
      "url": "https://github.com/mhart"
    },
    {
      "name": "Zachary Scott",
      "email": "zachary@zacharyscott.net",
      "url": "http://zacharyscott.net/"
    },
    {
      "name": "Raoul Millais",
      "url": "https://github.com/raoulmillais"
    },
    {
      "name": "Salsita Software",
      "url": "http://www.salsitasoft.com/"
    },
    {
      "name": "Mike Schilling",
      "email": "mike@emotive.com",
      "url": "http://www.emotive.com/"
    },
    {
      "name": "Jackson Tian",
      "email": "shyvo1987@gmail.com",
      "url": "http://weibo.com/shyvo"
    },
    {
      "name": "Mikhail Zyatin",
      "email": "mikhail.zyatin@gmail.com",
      "url": "https://github.com/Sitin"
    },
    {
      "name": "Chris Tavares",
      "email": "ctavares@microsoft.com",
      "url": "https://github.com/christav"
    },
    {
      "name": "Frank Xu",
      "email": "yyfrankyy@gmail.com",
      "url": "http://f2e.us/"
    },
    {
      "name": "Guido D'Albore",
      "email": "guido@bitstorm.it",
      "url": "http://www.bitstorm.it/"
    },
    {
      "name": "Jack Senechal",
      "url": "http://jacksenechal.com/"
    },
    {
      "name": "Matthias Hölzl",
      "email": "tc@xantira.com",
      "url": "https://github.com/hoelzl"
    },
    {
      "name": "Camille Reynders",
      "email": "info@creynders.be",
      "url": "http://www.creynders.be/"
    },
    {
      "name": "Taylor Gautier",
      "url": "https://github.com/tsgautier"
    },
    {
      "name": "Todd Bryan",
      "url": "https://github.com/toddrbryan"
    },
    {
      "name": "Leore Avidar",
      "email": "leore.avidar@gmail.com",
      "url": "http://leoreavidar.com/"
    },
    {
      "name": "Dave Aitken",
      "email": "dave.aitken@gmail.com",
      "url": "http://www.actionshrimp.com/"
    },
    {
      "name": "Shaney Orrowe",
      "email": "shaney.orrowe@practiceweb.co.uk"
    },
    {
      "name": "Candle",
      "email": "candle@candle.me.uk"
    },
    {
      "name": "Jess Telford",
      "email": "hi@jes.st",
      "url": "http://jes.st"
    },
    {
      "name": "Tom Hughes",
      "email": "<tom@compton.nu",
      "url": "http://compton.nu/"
    },
    {
      "name": "Piotr Rochala",
      "url": "http://rocha.la/"
    },
    {
      "name": "Michael Avila",
      "url": "https://github.com/michaelavila"
    },
    {
      "name": "Ryan Gahl",
      "url": "https://github.com/ryedin"
    },
    {
      "name": "Eric Laberge",
      "email": "e.laberge@gmail.com",
      "url": "https://github.com/elaberge"
    },
    {
      "name": "Benjamin E. Coe",
      "email": "ben@npmjs.com",
      "url": "https://twitter.com/benjamincoe"
    },
    {
      "name": "Stephen Cresswell",
      "url": "https://github.com/cressie176"
    },
    {
      "name": "Pascal Ehlert",
      "email": "pascal@hacksrus.net",
      "url": "http://www.hacksrus.net/"
    },
    {
      "name": "Tom Spencer",
      "email": "fiznool@gmail.com",
      "url": "http://fiznool.com/"
    },
    {
      "name": "Tristian Flanagan",
      "email": "tflanagan@datacollaborative.com",
      "url": "https://github.com/tflanagan"
    },
    {
      "name": "Tim Johns",
      "email": "timjohns@yahoo.com",
      "url": "https://github.com/TimJohns"
    },
    {
      "name": "Bogdan Chadkin",
      "email": "trysound@yandex.ru",
      "url": "https://github.com/TrySound"
    },
    {
      "name": "David Wood",
      "email": "david.p.wood@gmail.com",
      "url": "http://codesleuth.co.uk/"
    },
    {
      "name": "Nicolas Maquet",
      "url": "https://github.com/nmaquet"
    }
  ],
  "dependencies": {
    "sax": "^1.2.1"
  },
  "description": "Simple XML to JavaScript object converter.",
  "devDependencies": {
    "tap-summary": "^3.0.1",
    "tape": "^4.4.0"
  },
  "engines": {
    "node": ">=6.0.0"
  },
  "keywords": [
    "xml",
    "json",
    "parser"
  ],
  "license": "MIT",
  "name": "xml2js-parser",
  "optionalDependencies": {},
  "readme": "xml2js-parser\r\n=============\r\n\r\nSimple XML to JavaScript object converter that uses a [sax-js](https://github.com/isaacs/sax-js/) for parsing.\r\nSupport async as native promise or callback and sync mode operation.\r\n\r\nDescription\r\n-----------\r\n\r\nThis is a fork from a wonderful [xml2js](https://www.npmjs.com/package/xml2js) module. \r\n\r\nIt aims to keep backwards compatibility with `xml2js` version 0.4.17 and \r\ntarget `nodejs` v6.x but without XML building support.\r\n\r\nMotivation behind fork was:\r\n- do not use `coffee-script`\r\n- do one thing and do it well (_no builder_)\r\n- minimal dependency tree (_no lodash_)\r\n- use javascript new features from node v6.x\r\n\r\nInstallation\r\n-----------\r\n\r\nYo install just type `npm install xml2js-parser` which will download xml2js-parser and dependencies.\r\n\r\nShoot-and-forget usage\r\n----------------------\r\n\r\nYou want to parse XML as simple and easy as possible? Take this:\r\n\r\n```javascript\r\nconst parseString = require('xml2js-parser').parseString;\r\nconst xml = '<root>Hello xml2js-parser!</root>';\r\nparseString(xml, (err, result) => {\r\n  console.log(result);\r\n});\r\n```\r\n\r\nIf you need some special options, `xml2js-parser` supports a number of\r\noptions (see below), you can specify these as second argument:\r\n\r\n```javascript\r\nparseString(xml, {trim: true}, function (err, result) => {\r\n  // processed data\r\n});\r\n```\r\n\r\nNew promises usage\r\n------------------\r\n\r\n```javascript\r\nconst parseString = require('xml2js-parser').parseString;\r\n\r\nconst xml = '<root>Hello xml2js-parser!</root>';\r\nparseString(xml)\r\n.then(res) => console.log(res))\r\n.catch(err) => console.error(err));\r\n```\r\n\r\nStandard usage\r\n--------------\r\n\r\n```javascript\r\nconst fs = require('fs');\r\nconst Parser = require('xml2js-parser');\r\n\r\nvar parser = new Parser({trim: true});\r\nfs.readFile(__dirname + '/foo.xml', (err, xml) => {\r\n  parser.parseString(xml, (err, result) => {\r\n    console.dir(result);\r\n  });\r\n});\r\n```\r\n\r\nSync mode\r\n---------\r\n\r\n```javascript\r\nconst fs = require('fs');\r\nconst parseStringSync = require('xml2js-parser').parseStringSync;\r\n\r\nfs.readFile(__dirname + '/foo.xml', (err, xml) => {\r\n  try {\r\n    const res = parseStringSync(xml);\r\n    console.log(res);\r\n  } catch (err)  {\r\n    console.error(err);\r\n  }\r\n});\r\n```\r\n\r\nProcessing attribute, tag names and values\r\n------------------------------------------\r\n\r\nYou can optionally provide the parser with attribute name and tag name processors as well \r\nas element value processors:\r\n\r\n```javascript\r\nfunction nameToUpperCase(name) {\r\n  return name.toUpperCase();\r\n}\r\n\r\n// transform all attribute and tag names and values to uppercase\r\nparseString(xml, {\r\n  tagNameProcessors: [nameToUpperCase],\r\n  attrNameProcessors: [nameToUpperCase],\r\n  valueProcessors: [nameToUpperCase],\r\n  attrValueProcessors: [nameToUpperCase]},\r\n  (err, result) => {\r\n    // processed data\r\n});\r\n```\r\n\r\nThe `tagNameProcessors`, `attrNameProcessors`, `attrValueProcessors` and `valueProcessors` options\r\naccept an `Array` of functions with the following signature:\r\n\r\n```javascript\r\nfunction (name) { //do something with name and return result }\r\n```\r\n\r\nSome processors are provided out-of-the-box and can be found in code:\r\n\r\n- `normalize`: transforms the name to lowercase.\r\n(Automatically used when `normalize` option is set to `true`)\r\n\r\n- `firstCharLowerCase`: transforms the first character to lower case.\r\nE.g. 'MyTagName' becomes 'myTagName'\r\n\r\n- `stripPrefix`: strips the xml namespace prefix. E.g `<foo:Bar/>` will become 'Bar'.\r\n(N.B.: the `xmlns` prefix is NOT stripped.)\r\n\r\n- `parseNumbers`: parses integer-like strings as integers and float-like strings as floats\r\nE.g. \"0\" becomes 0 and \"15.56\" becomes 15.56\r\n\r\n- `parseBooleans`: parses boolean-like strings to booleans\r\nE.g. \"true\" becomes true and \"False\" becomes false\r\n\r\nOptions\r\n-------\r\n\r\nApart from the default settings, there are a number of options that can be\r\nspecified for the parser. Options are specified by ``new Parser({optionName:\r\nvalue})``. Possible options are:\r\n\r\n  * `attrkey` (default: `$`): Prefix that is used to access the attributes.\r\n  * `charkey` (default: `_`): Prefix that is used to access the character content. \r\n  * `explicitCharkey` (default: `false`)\r\n  * `trim` (default: `false`): Trim the whitespace at the beginning and end of\r\n    text nodes.\r\n  * `normalizeTags` (default: `false`): Normalize all tag names to lowercase.\r\n  * `normalize` (default: `false`): Trim whitespaces inside text nodes.\r\n  * `explicitRoot` (default: `true`): Set this if you want to get the root\r\n    node in the resulting object.\r\n  * `emptyTag` (default: `''`): what will the value of empty nodes be.\r\n  * `explicitArray` (default: `true`): Always put child nodes in an array if\r\n    true; otherwise an array is created only if there is more than one.\r\n  * `ignoreAttrs` (default: `false`): Ignore all XML attributes and only create\r\n    text nodes.\r\n  * `mergeAttrs` (default: `false`): Merge attributes and child elements as\r\n    properties of the parent, instead of keying attributes off a child\r\n    attribute object. This option is ignored if `ignoreAttrs` is `false`.\r\n  * `validator` (default `null`): You can specify a callable that validates\r\n    the resulting structure somehow, however you want. See unit tests\r\n    for an example.\r\n  * `xmlns` (default `false`): Give each element a field usually called '$ns'\r\n    (the first character is the same as attrkey) that contains its local name\r\n    and namespace URI.\r\n  * `explicitChildren` (default `false`): Put child elements to separate\r\n    property. Doesn't work with `mergeAttrs = true`. If element has no children\r\n    then \"children\" won't be created. \r\n  * `childkey` (default `$$`): Prefix that is used to access child elements if\r\n    `explicitChildren` is set to `true`. \r\n  * `preserveChildrenOrder` (default `false`): Modifies the behavior of\r\n    `explicitChildren` so that the value of the \"children\" property becomes an\r\n    ordered array. When this is `true`, every node will also get a `#name` field\r\n    whose value will correspond to the XML nodeName, so that you may iterate\r\n    the \"children\" array and still be able to determine node names. The named\r\n    (and potentially unordered) properties are also retained in this\r\n    configuration at the same level as the ordered \"children\" array. \r\n  * `charsAsChildren` (default `false`): Determines whether chars should be\r\n    considered children if `explicitChildren` is on.\r\n  * `includeWhiteChars` (default `false`): Determines whether whitespace-only\r\n     text nodes should be included. \r\n  * `strict` (default `true`): Set sax-js to strict or non-strict parsing mode.\r\n    Defaults to `true` which is *highly* recommended, since parsing HTML which\r\n    is not well-formed XML might yield just about anything. \r\n  * `attrNameProcessors` (default: `null`): Allows the addition of attribute\r\n    name processing functions. Accepts an `Array` of functions.\r\n  * `attrValueProcessors` (default: `null`): Allows the addition of attribute\r\n    value processing functions. Accepts an `Array` of functions.\r\n  * `tagNameProcessors` (default: `null`): Allows the addition of tag name\r\n    processing functions. Accepts an `Array` of functions.\r\n  * `valueProcessors` (default: `null`): Allows the addition of element value\r\n    processing functions. Accepts an `Array` of functions.\r\n\r\nGetting support\r\n---------------\r\n\r\nIf you know you really found a bug, feel free to open an issue.\r\n\r\nRunning tests, development\r\n--------------------------\r\n\r\nThe development requirements are handled by `npm install` if you clone repository.\r\nWe also have a number of unit tests, they can be run using `npm test` directly\r\nfrom the project root. This runs zap to discover all the tests and execute\r\nthem.\r\n\r\nHow to contribute\r\n-----------------\r\n\r\nI'm always happy about useful new pull requests. Keep in mind that the better\r\nyour pull request is, the easier it can be added to `xml2js-parser`. As such please\r\nmake sure your patch is ok:\r\n\r\n * `xml2js-parser` is written in ECMAScript 2015 for node v6.x, respect it.\r\n * Make sure that the unit tests still all pass. \r\n * Please, add a unit test with your pull request, to show what was broken and\r\n   is now fixed or what was impossible and now works due to your new code.\r\n * If you add a new feature, please add some documentation that it exists.\r\n\r\nIf you like, you can add yourself in the `package.json` as contributor if you\r\ndeem your contribution significant enough. \r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/vavere/xml2js-parser/"
  },
  "scripts": {
    "test": "tape test/*.js | tap-summary"
  },
  "version": "1.1.1"
}
