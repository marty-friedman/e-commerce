{
  "_args": [
    [
      {
        "raw": "node-watch@https://registry.npmjs.org/node-watch/-/node-watch-0.4.1.tgz",
        "scope": null,
        "escapedName": "node-watch",
        "name": "node-watch",
        "rawSpec": "https://registry.npmjs.org/node-watch/-/node-watch-0.4.1.tgz",
        "spec": "https://registry.npmjs.org/node-watch/-/node-watch-0.4.1.tgz",
        "type": "remote"
      },
      "/opt/hybris_6.7.0.3/hybris/bin/ext-content/npmancillary/resources/npm"
    ]
  ],
  "_from": "node-watch@https://registry.npmjs.org/node-watch/-/node-watch-0.4.1.tgz",
  "_id": "node-watch@0.4.1",
  "_inCache": true,
  "_location": "/node-watch",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-watch@https://registry.npmjs.org/node-watch/-/node-watch-0.4.1.tgz",
    "scope": null,
    "escapedName": "node-watch",
    "name": "node-watch",
    "rawSpec": "https://registry.npmjs.org/node-watch/-/node-watch-0.4.1.tgz",
    "spec": "https://registry.npmjs.org/node-watch/-/node-watch-0.4.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/xunit-viewer"
  ],
  "_resolved": "https://registry.npmjs.org/node-watch/-/node-watch-0.4.1.tgz",
  "_shasum": "d0947d54a995f91135db4056b68722c6d7c322ad",
  "_shrinkwrap": null,
  "_spec": "node-watch@https://registry.npmjs.org/node-watch/-/node-watch-0.4.1.tgz",
  "_where": "/opt/hybris_6.7.0.3/hybris/bin/ext-content/npmancillary/resources/npm",
  "author": {
    "name": "yuanchuan",
    "email": "yuanchuan23@gmail.com",
    "url": "http://yuanchuan.name"
  },
  "bugs": {
    "url": "https://github.com/yuanchuan/node-watch/issues"
  },
  "dependencies": {},
  "description": "fs.watch() wrapper of Nodejs ",
  "devDependencies": {
    "fs-extra": "^0.30.0",
    "mocha": "^2.5.3",
    "tmp": "0.0.28"
  },
  "homepage": "https://github.com/yuanchuan/node-watch#readme",
  "keywords": [
    "fs.watch",
    "watch",
    "watchfile"
  ],
  "license": "MIT",
  "main": "./lib/watch.js",
  "name": "node-watch",
  "optionalDependencies": {},
  "readme": "#Node-watch\nA [fs.watch](http://nodejs.org/api/fs.html#fs_fs_watch_filename_options_listener) wrapper to watch files or directories(recursively by default).\n\n[![NPM](https://nodei.co/npm/node-watch.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/node-watch.png/)\n\n\n### Installation\n\n```bash\nnpm install node-watch\n```\n\n### Example\n\n```js\nvar watch = require('node-watch');\n\nwatch('somedir_or_somefile', function(filename) {\n  console.log(filename, ' changed.');\n});\n```\n\n### Why fs.watch wrapper\n\n* Some editors will generate temporary files which will cause the callback function to be triggered multiple times.\n* when watching a single file the callback function will only be triggered one time and then is seem to be unwatched.\n* Missing an option to watch a directory recursively.\n\n\n### The difference\nThis module **currently** does not differentiate event like `rename` or `delete`. Once there is a change, the callback function will be triggered.\n\n\n### Options\n\n`recursive`:Watch it recursively or not (defaults to **true**).\n\n`followSymLinks`: Follow symbolic links or not (defaults to **false**).\n\n`maxSymLevel`: The max number of following symbolic links, in order to prevent circular links (defaults to **1**).\n\n`filter`: node-watch will only watch elements that pass the test implemented by the provided function. The filter function is provided with a full path string argument(defaults to ```(fullPath) => true``` ).\n\n\n```js\nwatch('somedir', { recursive: false, followSymLinks: true }, function(filename) {\n  console.log(filename, ' changed.');\n});\n```\n\n### Watcher object\n\nSince v0.4.0 `watch()` will return a [fs.FSWatcher](https://nodejs.org/api/fs.html#fs_class_fs_fswatcher) like object,\nso you can close the watcher or detect change by `change` event instead of the old callback function.\n\n```js\nvar watcher = watch('./');\n\nwatcher.on('change', function(file) {\n  //\n});\n\nwatcher.on('error', function(err) {\n  //\n});\n\n// close\nwatcher.close();\n```\n\n\n###FAQ\n\n#### 1. How to watch mutiple files or directories\n\n```js\nwatch(['file1', 'file2'], function(file) {\n  //\n});\n```\n\n#### 2. How to filter files\n\nYou can write your own filter function as a higher-order function. For example:\n\n```js\nvar filter = function(pattern, fn) {\n  return function(filename) {\n    if (pattern.test(filename)) {\n      fn(filename);\n    }\n  }\n}\n// only watch for js files\nwatch('mydir', filter(/\\.js$/, function(filename) {\n  //\n}));\n```\n\nAlternatively, supply a filter function in the options object. For example:\n```js\n// don't watch node_modules folder\nvar options = {\n  filter : function(filename) {\n    return !/node_modules/.test(filename);\n  }\n};\nwatch('mydir', options, function(filename) {\n  //\n}));\n```\nThe second approach helps avoiding the [max open files](http://stackoverflow.com/questions/3734932/max-open-files-for-working-process) limit\n",
  "readmeFilename": "README.md",
  "repository": {
    "url": "git://github.com/yuanchuan/node-watch.git",
    "type": "git"
  },
  "scripts": {
    "test": "mocha"
  },
  "url": "https://github.com/yuanchuan/node-watch",
  "version": "0.4.1"
}
