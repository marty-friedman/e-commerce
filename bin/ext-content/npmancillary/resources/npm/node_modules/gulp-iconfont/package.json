{
  "_args": [
    [
      {
        "raw": "gulp-iconfont@https://registry.npmjs.org/gulp-iconfont/-/gulp-iconfont-8.0.1.tgz",
        "scope": null,
        "escapedName": "gulp-iconfont",
        "name": "gulp-iconfont",
        "rawSpec": "https://registry.npmjs.org/gulp-iconfont/-/gulp-iconfont-8.0.1.tgz",
        "spec": "https://registry.npmjs.org/gulp-iconfont/-/gulp-iconfont-8.0.1.tgz",
        "type": "remote"
      },
      "/opt/hybris_6.7.0.3/hybris/bin/ext-content/npmancillary/resources/npm"
    ]
  ],
  "_from": "gulp-iconfont@https://registry.npmjs.org/gulp-iconfont/-/gulp-iconfont-8.0.1.tgz",
  "_id": "gulp-iconfont@8.0.1",
  "_inCache": true,
  "_location": "/gulp-iconfont",
  "_phantomChildren": {},
  "_requested": {
    "raw": "gulp-iconfont@https://registry.npmjs.org/gulp-iconfont/-/gulp-iconfont-8.0.1.tgz",
    "scope": null,
    "escapedName": "gulp-iconfont",
    "name": "gulp-iconfont",
    "rawSpec": "https://registry.npmjs.org/gulp-iconfont/-/gulp-iconfont-8.0.1.tgz",
    "spec": "https://registry.npmjs.org/gulp-iconfont/-/gulp-iconfont-8.0.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/techne"
  ],
  "_resolved": "https://registry.npmjs.org/gulp-iconfont/-/gulp-iconfont-8.0.1.tgz",
  "_shasum": "bc32aa6e3ea5ca389fbb014ba8d2c08f0c3c0763",
  "_shrinkwrap": null,
  "_spec": "gulp-iconfont@https://registry.npmjs.org/gulp-iconfont/-/gulp-iconfont-8.0.1.tgz",
  "_where": "/opt/hybris_6.7.0.3/hybris/bin/ext-content/npmancillary/resources/npm",
  "author": {
    "name": "Nicolas Froidure",
    "url": "http://www.insertafter.com/blog.html"
  },
  "bugs": {
    "url": "https://github.com/nfroidure/gulp-iconfont/issues"
  },
  "dependencies": {
    "gulp-cond": "^1.0.0",
    "gulp-spawn": "^0.3.0",
    "gulp-svg2ttf": "^2.0.0",
    "gulp-svgicons2svgfont": "^3.0.1",
    "gulp-ttf2eot": "^1.1.1",
    "gulp-ttf2woff": "^1.1.0",
    "gulp-ttf2woff2": "^2.0.2",
    "gulp-util": "^3.0.7",
    "plexer": "^1.0.1",
    "streamfilter": "^1.0.5"
  },
  "description": "Create icon fonts from several SVG icons",
  "devDependencies": {
    "coveralls": "^2.11.6",
    "eslint": "^1.10.1",
    "eslint-config-simplifield": "^1.2.2",
    "gulp": "^3.9.1",
    "istanbul": "^0.4.2",
    "mocha": "^2.4.5",
    "mocha-lcov-reporter": "^1.0.0",
    "neatequal": "^1.0.0",
    "streamtest": "^1.2.1"
  },
  "engines": {
    "node": ">= 4"
  },
  "homepage": "https://github.com/nfroidure/gulp-iconfont",
  "keywords": [
    "gulpplugin",
    "gulp",
    "icon",
    "font"
  ],
  "license": "MIT",
  "main": "src/index.js",
  "name": "gulp-iconfont",
  "optionalDependencies": {},
  "readme": "# gulp-iconfont\n> Create SVG/TTF/EOT/WOFF/WOFF2 fonts from several SVG icons with [Gulp](http://gulpjs.com/).\n\n[![NPM version](https://badge.fury.io/js/gulp-iconfont.svg)](https://npmjs.org/package/gulp-iconfont) [![Build status](https://secure.travis-ci.org/nfroidure/gulp-iconfont.svg)](https://travis-ci.org/nfroidure/gulp-iconfont) [![Dependency Status](https://david-dm.org/nfroidure/gulp-iconfont.svg)](https://david-dm.org/nfroidure/gulp-iconfont) [![devDependency Status](https://david-dm.org/nfroidure/gulp-iconfont/dev-status.svg)](https://david-dm.org/nfroidure/gulp-iconfont#info=devDependencies) [![Coverage Status](https://coveralls.io/repos/nfroidure/gulp-iconfont/badge.svg?branch=master)](https://coveralls.io/r/nfroidure/gulp-iconfont?branch=master) [![Code Climate](https://codeclimate.com/github/nfroidure/gulp-iconfont.svg)](https://codeclimate.com/github/nfroidure/gulp-iconfont)\n\nYou can test this library with the\n [frontend generator](http://nfroidure.github.io/svgiconfont/).\n\n**Warning:** While this plugin may still be useful for fonts generation or old browser\n support, you should consider using SVG icons directly. Indeed, when i created\n `gulp-iconfont` and all its related modules, using SVG icons was just not realistic\n for a wide browser suppport but i was already conviced that SVG was the\n future, that's why i wanted my SVG source files to sit separated in a folder.\n So, now, just enjoy switching to SVG with almost no effort :). Was a great\n open source journey with you all!\n \n[More info on with using SVG over icon fonts](https://sarasoueidan.com/blog/icon-fonts-to-svg/).\n\n## Usage\n\nFirst, install `gulp-iconfont` as a development dependency:\n\n```shell\nnpm install --save-dev gulp-iconfont\n```\n\nThen, add it to your `gulpfile.js`:\n\n```javascript\nvar iconfont = require('gulp-iconfont');\nvar runTimestamp = Math.round(Date.now()/1000);\n\ngulp.task('Iconfont', function(){\n  return gulp.src(['assets/icons/*.svg'])\n    .pipe(iconfont({\n      fontName: 'myfont', // required\n      prependUnicode: true, // recommended option\n      formats: ['ttf', 'eot', 'woff'], // default, 'woff2' and 'svg' are available\n      timestamp: runTimestamp, // recommended to get consistent builds when watching files\n    }))\n      .on('glyphs', function(glyphs, options) {\n        // CSS templating, e.g.\n        console.log(glyphs, options);\n      })\n    .pipe(gulp.dest('www/fonts/'));\n});\n```\n\n`gulp-iconfont` bundles several plugins to bring a simpler API\n (`gulp-svgicons2svgfont`, `gulp-svg2tff`, `gulp-ttf2eot`, `gulp-ttf2woff`)\n for more flexibility, feel free to use them separately.\n\n **If some font glyphs aren't converted properly** you should add the\n  `normalize:true` option and a `fontHeight` greater than 1000\n  (`fontHeight: 1001`).\n\n### Make your CSS\n\nTo use this font in your CSS, you could add a mixin like in this\n [real world example](https://github.com/ChtiJS/chtijs.francejs.org/blob/master/documents/less/_icons.less).\n You can also generate your CSS automatically with\n [`gulp-iconfont-css`](https://github.com/backflip/gulp-iconfont-css).\n\nIt's also easy to make a CSS template by yourself. Like\n [this example](https://github.com/cognitom/symbols-for-sketch/blob/master/gulpfile.js#L17),\n `gulp-consolidate` is useful to handling\n [such a template](https://github.com/cognitom/symbols-for-sketch/blob/master/templates/fontawesome-style.css). The template is outdated, **change** every occurrence of `glyph.codepoint.toString(16).toUpperCase()` to `glyph.unicode[0].charCodeAt(0).toString(16).toUpperCase()`, otherwise it will not work.\n\n```javascript\nvar async = require('async');\nvar gulp = require('gulp');\nvar iconfont = require('gulp-iconfont');\nvar consolidate = require('gulp-consolidate');\n\ngulp.task('Iconfont', function(done){\n  var iconStream = gulp.src(['assets/icons/*.svg'])\n    .pipe(iconfont({ fontName: 'myfont' }));\n\n  async.parallel([\n    function handleGlyphs (cb) {\n      iconStream.on('glyphs', function(glyphs, options) {\n        gulp.src('templates/myfont.css')\n          .pipe(consolidate('lodash', {\n            glyphs: glyphs,\n            fontName: 'myfont',\n            fontPath: '../fonts/',\n            className: 's'\n          }))\n          .pipe(gulp.dest('www/css/'))\n          .on('finish', cb);\n      });\n    },\n    function handleFonts (cb) {\n      iconStream\n        .pipe(gulp.dest('www/fonts/'))\n        .on('finish', cb);\n    }\n  ], done);\n});\n```\n\n## Issues\n\nAdd issues to the right repos:\n* the plugin doesn't work at all, submit your issue in this repo.\n* every font doesn't display as expected: submit the issue to the\n [svgicons2svgfont](https://github.com/nfroidure/svgicons2svgfont) repository.\n* only some fonts are damaged? Please look at the font format the targeted\n browser actually use and then, submit your issue to one of those projects:\n [svg2ttf](https://github.com/fontello/svg2ttf),\n [ttf2eot](https://github.com/fontello/ttf2eot),\n [ttf2woff](https://github.com/fontello/ttf2woff).\n\n## API\n\n### iconfont(options)\n\n#### options.formats\nType: `Array`\nDefault value: `['ttf', 'eot', 'woff']`\nPossible values: `['svg', 'ttf', 'eot', 'woff', 'woff2']`\n\nSince SVG fonts are deprecated in some (every ?) browsers, they are disabled\n per default.\n\nAlso the WOFF2 fonts are disabled since it seems to cause issues on some setup\n (see https://github.com/nfroidure/gulp-iconfont/issues/64).\n\n#### options.autohint\nType: `Boolean|String`\nDefault value: `false`\n\nIf [ttfautohint](http://www.freetype.org/ttfautohint/) is installed on your\n system, you may want to auto hint your fonts. Beware that this is an\n experimental and untested feature (beware to use at least the 0.93 version).\n \nIf the value is a string, it is taken to be the path to the `ttfautohint` binary.\n Otherwise, `ttfautohint` is searched in $PATH.\n\n#### options.*\nThe [svgicons2svgfont](https://github.com/nfroidure/svgicons2svgfont#svgicons2svgfontoptions)\n are available:\n* options.fontName (required)\n* options.fontWeight\n* options.fontStyle\n* options.fixedWidth\n* options.centerHorizontally\n* options.normalize\n* options.fontHeight\n* options.round\n* options.descent\n* options.metadata\n* options.log\n\nSo are the [gulp-svgicons2svgfont](https://github.com/nfroidure/gulp-svgicons2svgfont#svgicons2svgfontoptions):\n* options.startUnicode\n* options.prependUnicode\n\nAnd the [gulp-svg2ttf](https://github.com/nfroidure/gulp-svg2ttf#svg2ttfoptions):\n* options.timestamp\n\n## Preparing SVG's\n\nBeware that your SVG icons must have a high enough height. **500 is a minimum**. If\n you do not want to resize them, you can try to combine the `fontHeight` and\n the `normalize` option to get them in a correct size.\n\n### Inkscape\nDegroup every shapes (Ctrl+Shift+G), convert to pathes (Ctrl+Maj+C)  and merge\n them (Ctrl++). Then save your SVG, prefer 'simple SVG' file type.\n\n### Illustrator\n\nSave your file as SVG with the following settings:\n\n- SVG Profiles: SVG 1.1\n- Fonts Type: SVG\n- Fonts Subsetting: None\n- Options Image Location: Embed\n- Advanced Options\n  - CSS Properties: Presentation Attributes\n  - Decimal Places: 1\n  - Encoding: UTF-8\n  - Output fewer <tspan> elements: check\n\nLeave the rest unchecked.\n\nMore in-depth information: [http://www.adobe.com/inspire/2013/09/exporting-svg-illustrator.html](http://www.adobe.com/inspire/2013/09/exporting-svg-illustrator.html)\n\n### Sketch\n\n[Sketch](http://bohemiancoding.com/sketch/) is a relatively new drawing tool on\n Mac. With help of [Sketch Tools](http://bohemiancoding.com/sketch/tool/) and\n [gulp-sketch](https://github.com/cognitom/gulp-sketch), you can directly create\n fonts from your Sketch file. No need to export intermediate SVGs.\n\n![Directly create fonts from your Sketch file](https://github.com/cognitom/symbols-for-sketch/raw/master/images/webfonts.png)\n\nHere is a sample repo \"[Symbols for Sketch](https://github.com/cognitom/symbols-for-sketch)\".\n\n0. [Download the zipped repo](https://github.com/cognitom/symbols-for-sketch/archive/master.zip) and extract it.\n0. Go to the directory. `$ cd path/to/dir`\n0. Install some tools. `$ npm install`\n0. Create fonts and CSS `$ gulp symbols`\n\n## Contributing\nFeel free to push your code if you agree with publishing under the MIT license.\n\n## Stats\n[![NPM](https://nodei.co/npm/gulp-iconfont.png?downloads=true&stars=true)](https://nodei.co/npm/gulp-iconfont/)\n[![NPM](https://nodei.co/npm-dl/gulp-iconfont.png)](https://nodei.co/npm/gulp-iconfont/)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/nfroidure/gulp-iconfont.git"
  },
  "scripts": {
    "cli": "env NPM_RUN_CLI=1",
    "cover": "istanbul cover --report html _mocha -- tests/*.mocha.js -R spec -t 5000",
    "coveralls": "istanbul cover _mocha --report lcovonly -- tests/*.mocha.js -R spec -t 5000 && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage",
    "generate-fixtures": "./tests/generate-fixtures.sh",
    "lint": "eslint src/*.js tests/*.js",
    "preversion": "npm run lint && npm test",
    "test": "mocha tests/*.mocha.js"
  },
  "version": "8.0.1"
}
