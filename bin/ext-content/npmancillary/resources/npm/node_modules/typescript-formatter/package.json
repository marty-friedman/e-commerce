{
  "_args": [
    [
      {
        "raw": "typescript-formatter@https://registry.npmjs.org/typescript-formatter/-/typescript-formatter-5.2.0.tgz",
        "scope": null,
        "escapedName": "typescript-formatter",
        "name": "typescript-formatter",
        "rawSpec": "https://registry.npmjs.org/typescript-formatter/-/typescript-formatter-5.2.0.tgz",
        "spec": "https://registry.npmjs.org/typescript-formatter/-/typescript-formatter-5.2.0.tgz",
        "type": "remote"
      },
      "/opt/hybris_6.7.0.3/hybris/bin/ext-content/npmancillary/resources/npm"
    ]
  ],
  "_from": "typescript-formatter@https://registry.npmjs.org/typescript-formatter/-/typescript-formatter-5.2.0.tgz",
  "_id": "typescript-formatter@5.2.0",
  "_inCache": true,
  "_location": "/typescript-formatter",
  "_phantomChildren": {},
  "_requested": {
    "raw": "typescript-formatter@https://registry.npmjs.org/typescript-formatter/-/typescript-formatter-5.2.0.tgz",
    "scope": null,
    "escapedName": "typescript-formatter",
    "name": "typescript-formatter",
    "rawSpec": "https://registry.npmjs.org/typescript-formatter/-/typescript-formatter-5.2.0.tgz",
    "spec": "https://registry.npmjs.org/typescript-formatter/-/typescript-formatter-5.2.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/typescript-formatter/-/typescript-formatter-5.2.0.tgz",
  "_shasum": "cd45294f74c4cc880f48f81983a21fb264f6f173",
  "_shrinkwrap": null,
  "_spec": "typescript-formatter@https://registry.npmjs.org/typescript-formatter/-/typescript-formatter-5.2.0.tgz",
  "_where": "/opt/hybris_6.7.0.3/hybris/bin/ext-content/npmancillary/resources/npm",
  "author": {
    "name": "vvakame+dev@gmail.com"
  },
  "bin": {
    "tsfmt": "./bin/tsfmt"
  },
  "bugs": {
    "url": "https://github.com/vvakame/typescript-formatter/issues"
  },
  "dependencies": {
    "commandpost": "^1.0.0",
    "editorconfig": "^0.13.2"
  },
  "description": "Formatter of TypeScript code",
  "devDependencies": {
    "@types/mkdirp": "^0.3.29",
    "@types/mocha": "^2.2.33",
    "@types/node": "^7.0.5",
    "@types/power-assert": "^1.4.29",
    "grunt": "^1.0.1",
    "grunt-conventional-changelog": "^6.1.0",
    "intelli-espower-loader": "^1.0.1",
    "load-grunt-tasks": "^3.5.0",
    "mkdirp": "^0.5.1",
    "mocha": "^3.0.2",
    "power-assert": "^1.4.2",
    "tslint": "^5.1.0",
    "typescript": "^2.3.2",
    "typescript-formatter": "^5.1.3"
  },
  "directories": {
    "example": "example",
    "test": "test"
  },
  "engines": {
    "node": ">= 4.2.0"
  },
  "homepage": "https://github.com/vvakame/typescript-formatter",
  "keywords": [
    "TypeScript"
  ],
  "license": "MIT",
  "main": "./index",
  "name": "typescript-formatter",
  "optionalDependencies": {},
  "peerDependencies": {
    "typescript": "^2.0.6 || >=2.1.0-dev || >=2.2.0-dev || >=2.3.0-dev"
  },
  "readme": "# TypeScript Formatter (tsfmt) [![Build Status](https://travis-ci.org/vvakame/typescript-formatter.svg)](https://travis-ci.org/vvakame/typescript-formatter) [![Dependency Status](https://david-dm.org/vvakame/typescript-formatter.svg?theme=shields.io)](https://david-dm.org/vvakame/typescript-formatter)\n\nA TypeScript code formatter powered by [TypeScript Compiler Service](https://github.com/Microsoft/TypeScript/wiki/Using-the-Compiler-API#pretty-printer-using-the-ls-formatter).\n\n```bash\n$ tsfmt --help\n  Usage: tsfmt [options] [--] [files...]\n\n  Options:\n\n    -r, --replace         replace .ts file\n    --verify              checking file format\n    --baseDir <path>      config file lookup from <path>\n    --stdin               get formatting content from stdin\n    --no-tsconfig         don't read a tsconfig.json\n    --no-tslint           don't read a tslint.json\n    --no-editorconfig     don't read a .editorconfig\n    --no-vscode           don't read a .vscode/settings.json\n    --no-tsfmt            don't read a tsfmt.json\n    --useTsconfig <path>  using specified config file instead of tsconfig.json\n    --useTslint <path>    using specified config file instead of tslint.json\n    --useTsfmt <path>     using specified config file instead of tsfmt.json\n    --verbose             makes output more verbose\n```\n\n## Installation\n\n```npm install -g typescript-formatter```\n\n## Usage\n\n### Format or verify specific TypeScript files\n\n```bash\n$ cat sample.ts\nclass Sample {hello(word=\"world\"){return \"Hello, \"+word;}}\nnew Sample().hello(\"TypeScript\");\n```\n\n```bash\n# basic. read file, output to stdout.\n$ tsfmt sample.ts\nclass Sample { hello(word = \"world\") { return \"Hello, \" + word; } }\nnew Sample().hello(\"TypeScript\");\n```\n\n```bash\n# from stdin. read from stdin, output to stdout.\n$ cat sample.ts | tsfmt --stdin\nclass Sample { hello(word = \"world\") { return \"Hello, \" + word; } }\nnew Sample().hello(\"TypeScript\");\n```\n\n```bash\n# replace. read file, and replace file.\n$ tsfmt -r sample.ts\nreplaced sample.ts\n$ cat sample.ts\nclass Sample { hello(word = \"world\") { return \"Hello, \" + word; } }\nnew Sample().hello(\"TypeScript\");\n```\n\n```bash\n# verify. checking file format.\n$ tsfmt --verify sample.ts\nsample.ts is not formatted\n$ echo $?\n1\n```\n\n### Reformat all files in a TypeScript project\n\nIf no files are specified on the command line but\na TypeScript project file (tsconfig.json) exists,\nthe list of files will be read from the project file.\n\n```bash\n# reads list of files to format from tsconfig.json\ntsfmt -r\n```\n\n## Note\n\nnow `indentSize` parameter is ignored. it is TypeScript compiler matters.\n\n## Read Settings From Files\n\n1st. Read settings from tsfmt.json. Bellow is the example with [default values](https://github.com/vvakame/typescript-formatter/blob/master/lib/utils.ts):\n\n```json\n{\n  \"baseIndentSize\": 0,\n  \"indentSize\": 4,\n  \"tabSize\": 4,\n  \"indentStyle\": 2,\n  \"newLineCharacter\": \"\\r\\n\",\n  \"convertTabsToSpaces\": true,\n  \"insertSpaceAfterCommaDelimiter\": true,\n  \"insertSpaceAfterSemicolonInForStatements\": true,\n  \"insertSpaceBeforeAndAfterBinaryOperators\": true,\n  \"insertSpaceAfterConstructor\": false,\n  \"insertSpaceAfterKeywordsInControlFlowStatements\": true,\n  \"insertSpaceAfterFunctionKeywordForAnonymousFunctions\": false,\n  \"insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis\": false,\n  \"insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets\": false,\n  \"insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces\": true,\n  \"insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces\": false,\n  \"insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces\": false,\n  \"insertSpaceAfterTypeAssertion\": false,\n  \"insertSpaceBeforeFunctionParenthesis\": false,\n  \"placeOpenBraceOnNewLineForFunctions\": false,\n  \"placeOpenBraceOnNewLineForControlBlocks\": false\n}\n```\n\n2nd. Read settings from tsconfig.json ([tsconfig.json](https://www.typescriptlang.org/docs/handbook/tsconfig-json.html))\n\n```text\n{\n  \"compilerOptions\": {\n    \"newLine\": \"LF\"\n  }\n}\n```\n\n3rd. Read settings from .editorconfig ([editorconfig](http://editorconfig.org/))\n\n```text\n# EditorConfig is awesome: http://EditorConfig.org\n\n# top-most EditorConfig file\nroot = true\n\n# Unix-style newlines with a newline ending every file\n[*]\nindent_style = tab\ntab_width = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n```\n\n4th. Read settings from tslint.json ([tslint](https://www.npmjs.org/package/tslint))\n\n```json\n{\n  \"rules\": {\n    \"indent\": [true, 4],\n    \"whitespace\": [true,\n      \"check-branch\",\n      \"check-operator\",\n      \"check-separator\",\n      \"check-typecast\"\n    ]\n  }\n}\n```\n\n5th. Read settings from .vscode/settings.json ([VisualStudio Code](https://code.visualstudio.com/Docs/customization/userandworkspace))\n\n```json\n{\n  // Place your settings in this file to overwrite default and user settings.\n  \"typescript.format.enable\": true,\n  \"typescript.format.insertSpaceAfterCommaDelimiter\": true,\n  \"typescript.format.insertSpaceAfterSemicolonInForStatements\": true,\n  \"typescript.format.insertSpaceBeforeAndAfterBinaryOperators\": true,\n  \"typescript.format.insertSpaceAfterKeywordsInControlFlowStatements\": true,\n  \"typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions\": false,\n  \"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis\": false,\n  \"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets\": false,\n  \"typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces\": false,\n  \"typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces\": false,\n  \"typescript.format.placeOpenBraceOnNewLineForFunctions\": false,\n  \"typescript.format.placeOpenBraceOnNewLineForControlBlocks\": false\n}\n```\n\n### Read Settings Rules\n\n```\n$ tree -a\n.\n├── .vscode\n│   └── settings.json\n├── foo\n│   ├── bar\n│   │   ├── .editorconfig\n│   │   └── buzz.ts\n│   ├── fuga\n│   │   ├── piyo.ts\n│   │   └── tsfmt.json\n│   └── tsfmt.json\n└── tslint.json\n\n4 directories, 7 files\n```\n\n1. exec `$ tsfmt -r foo/bar/buzz.ts foo/fuga/piyo.ts`\n2. for foo/bar/buzz.ts, read foo/tsfmt.json and foo/bar/.editorconfig and ./tslint.json and .vscode/settings.json\n3. for foo/fuga/piyo.ts, read foo/fuga/tsfmt.json and ./tslint.json and .vscode/settings.json\n\n## Change Log\n\nSee [CHANGELOG](https://github.com/vvakame/typescript-formatter/blob/master/CHANGELOG.md)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/vvakame/typescript-formatter.git"
  },
  "scripts": {
    "build": "tslint --fix --type-check -c _tslint.json -p tsconfig.json && tsfmt -r && tsc",
    "test": "npm run build && mocha --reporter spec --timeout 20000 --require intelli-espower-loader"
  },
  "version": "5.2.0"
}
