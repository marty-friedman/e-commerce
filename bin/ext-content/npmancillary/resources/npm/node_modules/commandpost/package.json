{
  "_args": [
    [
      {
        "raw": "commandpost@https://registry.npmjs.org/commandpost/-/commandpost-1.3.0.tgz",
        "scope": null,
        "escapedName": "commandpost",
        "name": "commandpost",
        "rawSpec": "https://registry.npmjs.org/commandpost/-/commandpost-1.3.0.tgz",
        "spec": "https://registry.npmjs.org/commandpost/-/commandpost-1.3.0.tgz",
        "type": "remote"
      },
      "/opt/hybris_6.7.0.3/hybris/bin/ext-content/npmancillary/resources/npm"
    ]
  ],
  "_from": "commandpost@https://registry.npmjs.org/commandpost/-/commandpost-1.3.0.tgz",
  "_id": "commandpost@1.3.0",
  "_inCache": true,
  "_location": "/commandpost",
  "_phantomChildren": {},
  "_requested": {
    "raw": "commandpost@https://registry.npmjs.org/commandpost/-/commandpost-1.3.0.tgz",
    "scope": null,
    "escapedName": "commandpost",
    "name": "commandpost",
    "rawSpec": "https://registry.npmjs.org/commandpost/-/commandpost-1.3.0.tgz",
    "spec": "https://registry.npmjs.org/commandpost/-/commandpost-1.3.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/typescript-formatter"
  ],
  "_resolved": "https://registry.npmjs.org/commandpost/-/commandpost-1.3.0.tgz",
  "_shasum": "e0654e4933abf58406c7d3b77ce747083da178c4",
  "_shrinkwrap": null,
  "_spec": "commandpost@https://registry.npmjs.org/commandpost/-/commandpost-1.3.0.tgz",
  "_where": "/opt/hybris_6.7.0.3/hybris/bin/ext-content/npmancillary/resources/npm",
  "author": {
    "name": "vvakame"
  },
  "bugs": {
    "url": "https://github.com/vvakame/commandpost/issues"
  },
  "dependencies": {},
  "description": "commandline option parser",
  "devDependencies": {
    "@types/mocha": "^2.2.41",
    "@types/node": "^9.3.0",
    "@types/power-assert": "^1.4.29",
    "conventional-changelog-cli": "^1.3.5",
    "es6-promise": "^4.1.0",
    "intelli-espower-loader": "^1.0.1",
    "mocha": "^5.0.0",
    "power-assert": "^1.4.4",
    "source-map-support": "^0.5.1",
    "tslint": "^5.9.1",
    "typescript": "^2.6.2",
    "typescript-formatter": "^7.0.1"
  },
  "directories": {
    "test": "test"
  },
  "homepage": "https://github.com/vvakame/commandpost",
  "license": "MIT",
  "main": "./lib/index",
  "name": "commandpost",
  "optionalDependencies": {},
  "readme": "# commandpost [![Circle CI](https://circleci.com/gh/vvakame/commandpost.png?style=badge)](https://circleci.com/gh/vvakame/commandpost)\n\ncommandpost is a command-line option parser.\nThis library inspired by [commander](https://www.npmjs.com/package/commander).\n\ncommander is very user friendly, but not [TypeScript](https://www.npmjs.com/package/typescript) friendly.\ncommandpost is improve it.\nOf course, commandpost can also be used from ordinary JavaScript program. :+1:\n\n## Installation\n\n```\n$ npm install --save commandpost\n```\n\n## How to use\n\n### Basic usage\n\n```\n$ cat cli.ts\nimport * as commandpost from \"commandpost\";\n\nlet root = commandpost\n\t.create<{ spice: string[]; }, { food: string; }>(\"dinner <food>\")\n\t.version(\"1.0.0\", \"-v, --version\")\n\t.description(\"today's dinner!\")\n\t.option(\"-s, --spice <name>\", \"What spice do you want? default: pepper\")\n\t.action((opts, args) => {\n\t\tconsole.log(`Your dinner is ${args.food} with ${opts.spice[0] || \"pepper\"}!`);\n\t});\n\ncommandpost\n\t.exec(root, process.argv)\n\t.catch(err => {\n\t\tif (err instanceof Error) {\n\t\t\tconsole.error(err.stack);\n\t\t} else {\n\t\t\tconsole.error(err);\n\t\t}\n\t\tprocess.exit(1);\n\t});\n\n$ node cli.js --help\n  Usage: dinner [options] [--] <food>\n\n  Options:\n\n    -s, --spice <name>  What spice do you want? default: pepper\n\n$ node cli.js -s \"soy sause\" \"fillet steak\"\nYour dinner is fillet steak with soy sause!\n```\n\n### Command\n\ntop level command is created by `commandpost.create` function.\n\ncommandpost can have a sub command.\nsub command is created by `topLevelCommand.subCommand` method.\nlike [this](https://github.com/vvakame/commandpost/blob/master/example/usage.ts#L36).\n\ncommandpost can configure several items.\ne.g. version information, app description, CLI usage and help message.\nI recommend that you should setup `.version` and `.description`.\nUsually, automatic generated help message satisfy you.\n\n### Option\n\n```\n// shorthand style & formal style option with required parameter. option value is convert to string[].\ncmd.option(\"-c, --config <configFile>\", \"Read setting from specified config file path\");\n\n// option with optional parameter. option value is convert to string[].\ncmd.option(\"-c, --config [configFile]\", \"Read setting from specified config file path\");\n\n// option without parameter. option value is convert to boolean. default false.\ncmd.option(\"--suppress-warning\", \"Suppress warning\");\n\n// option with `--no-` prefix. option value is convert to boolean. default true.\ncmd.option(\"--no-type-checking\", \"Type checking disabled\");\n```\n\nIf you want to handling unknown options, You can use `.allowUnknownOption` method.\n\n### Argument\n\n```\n// required argument\ncommandpost.create<{}, { food: string; }>(\"dinner <food>\");\n\n// optonal argument\ncommandpost.create<{}, { food: string; }>(\"dinner [food]\");\n\n// variadic argument\ncommandpost.create<{}, { foods: string[]; }>(\"dinner <food...>\");\n```\n\n### Examples\n\n* [example](https://github.com/vvakame/commandpost/blob/master/example/usage.ts) dir\n* [typescript-formatter](https://github.com/vvakame/typescript-formatter/blob/master/lib/cli.ts)\n* [dtsm](https://github.com/vvakame/dtsm/blob/master/lib/cli.ts)\n* [review.js](https://github.com/vvakame/review.js/blob/master/lib/cli.ts)\n* [prh](https://github.com/vvakame/prh/blob/master/lib/cli.ts)\n\n## Contributing\n\nThis package's author vvakame is not native english speaker. My first language is Japanese.\nIf you find incorrect english, please send me a pull request.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/vvakame/commandpost.git"
  },
  "scripts": {
    "build": "tslint --fix -c tslint.json -p tsconfig.json && tsfmt -r && tsc",
    "changelog": "conventional-changelog -p angular -i CHANGELOG.md -s",
    "test": "npm run build && mocha --reporter spec --timeout 20000 --require intelli-espower-loader"
  },
  "version": "1.3.0"
}
