{
  "_args": [
    [
      {
        "raw": "svg-pathdata@https://registry.npmjs.org/svg-pathdata/-/svg-pathdata-1.0.4.tgz",
        "scope": null,
        "escapedName": "svg-pathdata",
        "name": "svg-pathdata",
        "rawSpec": "https://registry.npmjs.org/svg-pathdata/-/svg-pathdata-1.0.4.tgz",
        "spec": "https://registry.npmjs.org/svg-pathdata/-/svg-pathdata-1.0.4.tgz",
        "type": "remote"
      },
      "/opt/hybris_6.7.0.3/hybris/bin/ext-content/npmancillary/resources/npm"
    ]
  ],
  "_from": "svg-pathdata@https://registry.npmjs.org/svg-pathdata/-/svg-pathdata-1.0.4.tgz",
  "_id": "svg-pathdata@1.0.4",
  "_inCache": true,
  "_location": "/svg-pathdata",
  "_phantomChildren": {
    "core-util-is": "1.0.2",
    "inherits": "2.0.3",
    "isarray": "1.0.0",
    "util-deprecate": "1.0.2"
  },
  "_requested": {
    "raw": "svg-pathdata@https://registry.npmjs.org/svg-pathdata/-/svg-pathdata-1.0.4.tgz",
    "scope": null,
    "escapedName": "svg-pathdata",
    "name": "svg-pathdata",
    "rawSpec": "https://registry.npmjs.org/svg-pathdata/-/svg-pathdata-1.0.4.tgz",
    "spec": "https://registry.npmjs.org/svg-pathdata/-/svg-pathdata-1.0.4.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/svgicons2svgfont"
  ],
  "_resolved": "https://registry.npmjs.org/svg-pathdata/-/svg-pathdata-1.0.4.tgz",
  "_shasum": "7a681342aac7effd8d52afba7999910c9da3b959",
  "_shrinkwrap": null,
  "_spec": "svg-pathdata@https://registry.npmjs.org/svg-pathdata/-/svg-pathdata-1.0.4.tgz",
  "_where": "/opt/hybris_6.7.0.3/hybris/bin/ext-content/npmancillary/resources/npm",
  "author": {
    "name": "Nicolas Froidure"
  },
  "bugs": {
    "url": "https://github.com/nfroidure/SVGPathData/issues"
  },
  "dependencies": {
    "readable-stream": "~2.0.4"
  },
  "description": "Parse, transform and encode SVG Path Data.",
  "devDependencies": {
    "browserify": "^12.0.1",
    "chai": "^3.4.1",
    "coveralls": "^2.11.4",
    "eslint": "^1.10.0",
    "eslint-config-simplifield": "^1.1.0",
    "istanbul": "^0.4.0",
    "mocha": "^2.3.4",
    "mocha-lcov-reporter": "^1.0.0",
    "rimraf": "^2.4.4"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "homepage": "https://github.com/nfroidure/SVGPathData#readme",
  "keywords": [
    "svg",
    "path",
    "data",
    "parser",
    "encoder",
    "transformer",
    "reader",
    "writer",
    "stream"
  ],
  "license": "MIT",
  "main": "src/SVGPathData.js",
  "name": "svg-pathdata",
  "optionalDependencies": {},
  "readme": "# SVGPathData\n> Manipulating SVG path data (path[d] attribute content) simply and efficiently.\n\n[![NPM version](https://badge.fury.io/js/svg-pathdata.svg)](https://npmjs.org/package/svg-pathdata) [![Build status](https://secure.travis-ci.org/nfroidure/SVGPathData.svg?branch=master)](https://travis-ci.org/nfroidure/SVGPathData?branch=master) [![Dependency Status](https://david-dm.org/nfroidure/SVGPathData.svg)](https://david-dm.org/nfroidure/SVGPathData) [![devDependency Status](https://david-dm.org/nfroidure/SVGPathData/dev-status.svg)](https://david-dm.org/nfroidure/SVGPathData#info=devDependencies) [![Coverage Status](https://coveralls.io/repos/nfroidure/SVGPathData/badge.svg?branch=master)](https://coveralls.io/r/nfroidure/SVGPathData?branch=master)\n\n## Including the library\nThis library is fully node based (based on current stream implementation) but\n you can also use it in modern browsers with the\n [browserified build](https://github.com/nfroidure/SVGPathData/blob/master/dist/SVGPathData.js)\n or in your own build using Browserify.\n\n## Reading PathData\n```js\nvar pathData = new SVGPathData ('\\\n  M 10 10 \\\n  H 60 \\\n  V 60 \\\n  L 10 60 \\\n  Z \\\n');\n\nconsole.log(pathData.commands);\n\n// {\"commands\":[{\n//    \"type\": SVGPathData.MOVE_TO,\n//    \"relative\": false,\n//    \"x\": 10, \"y\": 10\n//  },{\n//    \"type\": SVGPathData.HORIZ_LINE_TO,\n//    \"relative\": false,\n//    \"x\": 60\n//  },{\n//    \"type\": SVGPathData.VERT_LINE_TO,\n//    \"relative\":false,\n//    \"y\": 60\n//  },{\n//    \"type\": SVGPathData.LINE_TO,\n//    \"relative\": false,\n//    \"x\": 10,\n//    \"y\": 60\n//  },{\n//    \"type\": SVGPathData.CLOSE_PATH\n//  }\n// ]}\n```\n\n## Reading streamed PathData\n```js\nvar parser = new SVGPathData.Parser();\nparser.on('data', function(cmd) {\n  console.log(cmd);\n});\n\nparser.write('   ');\nparser.write('M 10');\nparser.write(' 10');\n\n// {\n//   \"type\": SVGPathData.MOVE_TO,\n//   \"relative\": false,\n//   \"x\": 10, \"y\": 10\n// }\n\n\nparser.write('H 60');\n\n// {\n//   \"type\": SVGPathData.HORIZ_LINE_TO,\n//   \"relative\": false,\n//   \"x\": 60\n// }\n\n\nparser.write('V');\nparser.write('60');\n\n// {\n//   \"type\": SVGPathData.VERT_LINE_TO,\n//   \"relative\": false,\n//   \"y\": 60\n// }\n\n\nparser.write('L 10 60 \\\n  Z');\n\n// {\n//   \"type\": SVGPathData.LINE_TO,\n//   \"relative\": false,\n//   \"x\": 10,\n//   \"y\": 60\n// }\n\n// {\n//   \"type\": SVGPathData.CLOSE_PATH\n// }\n\nparser.end();\n```\n\n## Outputting PathData\n```js\nvar pathData = new SVGPathData ('\\\n  M 10 10 \\\n  H 60 \\\n  V 60 \\\n  L 10 60 \\\n  Z \\\n');\n\nconsole.log(pathData.encode());\n// \"M10 10H60V60L10 60Z\"\n```\n\n## Streaming PathData out\n```js\nvar encoder = new SVGPathData.Encoder();\nencoder.setEncoding('utf8');\n\nencode.on('data', function(str) {\n  console.log(str);\n});\n\nencoder.write({\n   \"type\": SVGPathData.MOVE_TO,\n   \"relative\": false,\n   \"x\": 10, \"y\": 10\n });\n// \"M10 10\"\n\nencoder.write({\n   \"type\": SVGPathData.HORIZ_LINE_TO,\n   \"relative\": false,\n   \"x\": 60\n});\n// \"H60\"\n\nencoder.write({\n   \"type\": SVGPathData.VERT_LINE_TO,\n   \"relative\": false,\n   \"y\": 60\n});\n// \"V60\"\n\nencoder.write({\n   \"type\": SVGPathData.LINE_TO,\n   \"relative\": false,\n   \"x\": 10,\n   \"y\": 60\n});\n// \"L10 60\"\n\nencoder.write({\"type\": SVGPathData.CLOSE_PATH});\n// \"Z\"\n\nencode.end();\n```\n\n## Transforming PathData\nThis library was made to live decoding/transform/encoding SVG PathData. Here is\n [an example of that kind of use](https://github.com/nfroidure/svgicons2svgfont/blob/aa6df0211419e9d61c417c63bcc353f0cb2ea0c8/src/index.js#L192).\n\n### The synchronous way\n```js\nconsole.log(\n  new SVGPathData ('\\\n   m 10,10 \\\n   h 60 \\\n   v 60 \\\n   l 10,60 \\\n   z'\n  )\n  .toAbs()\n  .encode()\n);\n// \"M10,10 H70 V70 L80,130 Z\"\n```\n\n### The streaming/asynchronous way\nHere, we take SVGPathData from stdin and output it transformed to stdout.\n```js\n// stdin to parser\nprocess.stdin.pipe(new SVGPathData.Parser())\n// parser to transformer to absolute\n  .pipe(new SVGPathData.Transformer(SVGPathData.Transformer.TO_ABS))\n// transformer to encoder\n  .pipe(new SVGPathData.Encoder())\n// encoder to stdout\n  .pipe(process.stdout);\n```\n\n## Supported transformations\nYou can find every supported transformations in\n [this file](https://github.com/nfroidure/SVGPathData/blob/master/src/SVGPathDataTransformer.js#L47)\n of course, you can create yours by using this format:\n```js\nfunction SET_X_TO(xValue) {\n  xValue = xValue || 10; // Provide default values or throw errors for options\n  function(command) {\n    command.x = xValue; // transform command objects and return them\n    return command;\n  };\n};\n\n// Synchronous usage\nnew SVGPathData('...')\n  .transform(SET_X_TO, 25)\n  .encode();\n\n// Streaming usage\nprocess.stdin.pipe(new SVGPathData.Parser())\n  .pipe(new SVGPathData.Transformer(SET_X_TO, 25))\n  .pipe(new SVGPathData.Encoder())\n  .pipe(process.stdout);\n```\n\n## Stats\n\n[![NPM](https://nodei.co/npm/svg-pathdata.png?downloads=true&stars=true)](https://nodei.co/npm/svg-pathdata/)\n[![NPM](https://nodei.co/npm-dl/svg-pathdata.png)](https://nodei.co/npm/svg-pathdata/)\n\n## Contributing\nClone this project, run:\n```sh\nnpm install; npm test\n```\n\nBuild:\n```sh\nnpm build\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nfroidure/SVGPathData.git"
  },
  "scripts": {
    "build": "browserify src/SVGPathData.js -o dist/SVGPathData.js -s SVGPathData",
    "cli": "env NPM_RUN_CLI=1",
    "cover": "istanbul cover --report html _mocha -- tests/*.mocha.js -R spec -t 5000",
    "coveralls": "istanbul cover _mocha --report lcovonly -- tests/*.mocha.js -R spec -t 5000 && coveralls < ./coverage/lcov.info && rimraf ./coverage",
    "lint": "eslint src/*.js tests/*.js",
    "preversion": "npm test",
    "test": "mocha tests/*.mocha.js"
  },
  "version": "1.0.4"
}
