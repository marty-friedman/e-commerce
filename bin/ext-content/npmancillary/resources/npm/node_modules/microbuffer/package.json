{
  "_args": [
    [
      {
        "raw": "microbuffer@https://registry.npmjs.org/microbuffer/-/microbuffer-1.0.0.tgz",
        "scope": null,
        "escapedName": "microbuffer",
        "name": "microbuffer",
        "rawSpec": "https://registry.npmjs.org/microbuffer/-/microbuffer-1.0.0.tgz",
        "spec": "https://registry.npmjs.org/microbuffer/-/microbuffer-1.0.0.tgz",
        "type": "remote"
      },
      "/opt/hybris_6.7.0.3/hybris/bin/ext-content/npmancillary/resources/npm"
    ]
  ],
  "_from": "microbuffer@https://registry.npmjs.org/microbuffer/-/microbuffer-1.0.0.tgz",
  "_id": "microbuffer@1.0.0",
  "_inCache": true,
  "_location": "/microbuffer",
  "_phantomChildren": {},
  "_requested": {
    "raw": "microbuffer@https://registry.npmjs.org/microbuffer/-/microbuffer-1.0.0.tgz",
    "scope": null,
    "escapedName": "microbuffer",
    "name": "microbuffer",
    "rawSpec": "https://registry.npmjs.org/microbuffer/-/microbuffer-1.0.0.tgz",
    "spec": "https://registry.npmjs.org/microbuffer/-/microbuffer-1.0.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/svg2ttf",
    "/ttf2eot",
    "/ttf2woff"
  ],
  "_resolved": "https://registry.npmjs.org/microbuffer/-/microbuffer-1.0.0.tgz",
  "_shasum": "8b3832ed40c87d51f47bb234913a698a756d19d2",
  "_shrinkwrap": null,
  "_spec": "microbuffer@https://registry.npmjs.org/microbuffer/-/microbuffer-1.0.0.tgz",
  "_where": "/opt/hybris_6.7.0.3/hybris/bin/ext-content/npmancillary/resources/npm",
  "bugs": {
    "url": "https://github.com/fontello/microbuffer/issues"
  },
  "dependencies": {},
  "description": "Light implementation of binary buffer with helpers for easy access.",
  "devDependencies": {
    "eslint": "0.18.0",
    "eslint-plugin-nodeca": "^1.0.3",
    "lodash": "*",
    "mocha": "^2.2.4"
  },
  "homepage": "https://github.com/fontello/microbuffer#readme",
  "keywords": [
    "buffer"
  ],
  "license": "MIT",
  "name": "microbuffer",
  "optionalDependencies": {},
  "readme": "microbuffer\n===========\n\n[![Build Status](https://img.shields.io/travis/fontello/microbuffer/master.svg?style=flat)](https://travis-ci.org/fontello/microbuffer)\n[![NPM version](https://img.shields.io/npm/v/microbuffer.svg?style=flat)](https://www.npmjs.org/package/microbuffer)\n\n> Light implementation of binary buffer with helpers for easy access.\n\nThis library was written for fontello's font convertors -\n[svg2ttf](https://github.com/fontello/svg2ttf)\n[ttf2woff](https://github.com/fontello/ttf2woff)\n[ttf2eot](https://github.com/fontello/ttf2eot). Main features are:\n- good speed & compact size (no dependencies)\n- transparent typed arrays support in browsers\n- methods to simplify binary data read/write\n\n\nAPI\n---\n\n### Constructor\n\n- `new MicroBuffer(microbuffer [, offset, length])` - wrap MicroBuffer\n  instanse, sharing the same data.\n- `new MicroBuffer(Uint8Array|Array [, offset, length])` - wrap Uint8Array|Array.\n- `new MicroBuffer(size)` - create new MicroBuffer of specified size.\n\n### Methods\n\n- `.getUint8(pos)`\n- `.getUint16(pos, littleEndian)`\n- `.getUint32(pos, littleEndian)`\n- `.setUint8(pos, value)`\n- `.setUint16(pos, value, littleEndian)`\n- `.setUint32(pos, value, littleEndian)`\n\nWith position update:\n\n- `.writeUint8(value)`\n- `.writeInt8(value)`\n- `.writeUint16(value, littleEndian)`\n- `.writeInt16(value, littleEndian)`\n- `.writeUint32(value, littleEndian)`\n- `.writeInt32(value, littleEndian)`\n- `.writeUint64(value)`\n\nOther:\n\n- `.seek(pos)`\n- `.fill(value)`\n- `.writeBytes(Uint8Array|Array)`\n- `.toString()`\n- `.toArray()`\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/fontello/microbuffer.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "1.0.0"
}
